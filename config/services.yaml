# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'ru'
    images_upload_path: '%env(IMAGES_PATH)%'
    images_show_path: '%env(IMAGES_SHOW_PATH)%'
    kernel_path: '%kernel.project_dir%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $imagePath: '%images_upload_path%'
            $imageShowPath: '%images_show_path%'
            $rootPath: '%kernel_path%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    gedmo.listener.timestampable:
        class: Gedmo\Timestampable\TimestampableListener
        tags:
            - { name: doctrine.event_subscriber, connection: default }
        calls:
            - [ setAnnotationReader, [ "@annotation_reader" ] ]

    custom.translation.universal:
        class: App\Service\CustomLabelTranslatorStrategy

    admin.category:
        class: App\Admin\CreepyDataAdmin
        arguments: [~, App\Entity\CreepyData, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label_translator_strategy: "sonata.admin.label.strategy.native",  group: "Creepy", label: "CreepyStories" }

    admin.flower_category:
        class: App\Admin\FlowerCategoryAdmin
        arguments: [~, App\Entity\FlowerCategory, ~]
        calls:
            - [ setTokenStorage, [ "@security.token_storage" ] ]
        tags:
            - { name: sonata.admin, manager_type: orm, label_translator_strategy: "sonata.admin.label.strategy.native",  group: "Flowers", label: "FlowerCategory" }

    admin.flower_bouquet:
        class: App\Admin\FlowerBouquetAdmin
        arguments: [~, App\Entity\FlowerBouquet, ~]
        calls:
            - [ setTokenStorage, [ "@security.token_storage" ] ]
        tags:
            - { name: sonata.admin, manager_type: orm, label_translator_strategy: "sonata.admin.label.strategy.native", group: "Flowers", label: "FlowerBouquet" }


    admin.flower_photo:
        class: App\Admin\FlowerPhotoAdmin
        arguments: [~, App\Entity\FlowerPhoto, ~]
        calls:
            - [ setTokenStorage, [ "@security.token_storage" ] ]
        tags:
            - { name: sonata.admin, manager_type: orm, label_translator_strategy: "sonata.admin.label.strategy.native", group: "Flowers", label: "FlowerPhoto" }

    admin.order:
        class: App\Admin\OrderAdmin
        arguments: [~, App\Entity\Order, ~]
        calls:
            - [ setTokenStorage, [ "@security.token_storage" ] ]
        tags:
            - { name: sonata.admin, manager_type: orm, label_translator_strategy: "sonata.admin.label.strategy.native", group: "Orders", label: "Orders" }
#        calls:
#            - [ setImagePath, [ "%env(IMAGES_PATH)%" ] ]


    admin.flower_shop:
        class: App\Admin\FlowerShopAdmin
        arguments: [~, App\Entity\FlowerShop, ~]
        calls:
            - [ setTokenStorage, [ "@security.token_storage" ] ]
        tags:
            - { name: sonata.admin, manager_type: orm, label_translator_strategy: "sonata.admin.label.strategy.native",  group: "User Data", label: "FlowerShop", icon: '<i class="fa fa-user-circle-o"></i>'  }


    admin.individual:
        class: App\Admin\IndividualAdmin
        arguments: [~, App\Entity\Individual, ~]
        calls:
            - [ setTokenStorage, [ "@security.token_storage" ] ]
        tags:
            - { name: sonata.admin, manager_type: orm, label_translator_strategy: "sonata.admin.label.strategy.native", label: 'Individuals', group: "User Data"}

    admin.entrepreneur:
        class: App\Admin\EntrepreneurAdmin
        arguments: [~, App\Entity\Entrepreneur, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label_translator_strategy: "sonata.admin.label.strategy.native", label: 'Entrepreneur', group: "User Data" }

    admin.legal_entity:
        class: App\Admin\LegalEntityAdmin
        arguments: [~, App\Entity\LegalEntity, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label_translator_strategy: "sonata.admin.label.strategy.native", label: 'Legal Entities', group: "User Data" }
